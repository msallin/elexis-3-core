#/*******************************************************************************
# * Copyright (c) 2005-2019, G. Weirich and Elexis
# * All rights reserved. This program and the accompanying materials
# * are made available under the terms of the Eclipse Public License v1.0
# * which accompanies this distribution, and is available at
# * http://www.eclipse.org/legal/epl-v10.html
# *
# * Contributors:
# *    G. Weirich - initial implementation
# *    
# * $Id$
# *******************************************************************************

# Universelles create-Script für Elexis.
# Wird von JdbcLink automatisch für mySQL, hsqldb und PostgreSQL angepasst
# Bei mySQL und PostgreSQL: Database Elexis muss schon existieren, darf aber
# noch keine Tabellen enthalten.
# ---------------------------------------------
# This script can create the elexis database on mysql, hsql and postresql servers
# Tha database should exist already, but should not contain any tables.
#
# WARNING: The database layout is internal to elexis and must not be assumed stable.
# Fields can be omitted or changed between versions.
# Access to persistent data has to be done via the API (ch.elexis.data.PersistentObject)


# Table for all kinds of contact information (Patients, Relations, Labs)
CREATE TABLE kontakt(
	id				VARCHAR(40) primary key,	# UUID
	lastupdate      BIGINT,                     # timestamp of last update
	deleted			CHAR(1) default '0',		# indicates that this object is marked deleted
	istorganisation	CHAR(1) default '0',		# this object is an organization 
	istperson		CHAR(1) default '0',		# this object is a person
	istpatient		CHAR(1)	default '0',		# is a patient
	istanwender		CHAR(1) default '0',		# is an elexis user
	istmandant	    CHAR(1) default '0',		# is an elexis mandator
	istlabor		CHAR(1)	default '0',		# is a lab
	land			CHAR(3),					# country as ISO code
	geburtsdatum	CHAR(8),					# bithdate as yyyymmdd
	geschlecht		CHAR(1),					# sex m or w
	titel			VARCHAR(255),				# title
	titelsuffix		VARCHAR(255),				# title suffix
	bezeichnung1	VARCHAR(255),				# name1
	bezeichnung2	VARCHAR(255),				# name2
	bezeichnung3	VARCHAR(255),				# name3
	strasse			VARCHAR(255),				# street
	plz				VARCHAR(6),					# zip-code
	ort				VARCHAR(255),				# place (don't try Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch)
	telefon1		VARCHAR(30),				# phone1
	telefon2		VARCHAR(30),				# phone2
	fax				VARCHAR(30),				# you'll guess it
	natelnr			VARCHAR(30),				# mobile
	email			VARCHAR(255),				# guess 
	website			VARCHAR(255),
	gruppe			VARCHAR(10),				# mandator group
	patientnr		VARCHAR(40),				# external identifier
	anschrift		TEXT,						# postal (address sticker)
	bemerkung		TEXT,						# remarks
	diagnosen		BLOB,						# diagnoses	
	persanamnese	BLOB,						# anamnesis
	sysanamnese		BLOB,						# deprecated, do not use
	famanamnese	    BLOB,						# deprecated, do not use
	risiken			TEXT,						# risk factors
	allergien		TEXT,						# allergies
	extinfo			BLOB						# other informations (Hashtable)
);

CREATE INDEX k0 ON KONTAKT(Bezeichnung1);


# Verbindung von Kontakten zu Adressbezügen mit einem
# BezugsTEXT
CREATE TABLE  kontakt_adress_joint(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	myid		VARCHAR(40),					# ID of a KONTAKT 
	otherid		VARCHAR(40),					# ID of a KONTAKT that ist related to myID
	bezug		VARCHAR(80),					# Description of the relationship
	myrtype		CHAR(4),						# My formal relationship type
	otherrtype	CHAR(4)							# Other formal relationship type
);

CREATE INDEX aij1 on KONTAKT_ADRESS_JOINT (myId);

# Ein Fall ist eine benannte Serie von Behandlungen, welche demselben
# Patienten und demselben Garanten zugeordnet werden. (Aber nicht
# notwendigerweise demselben Mandanten)
CREATE TABLE   faelle(
	id				VARCHAR(40) primary key,		# UUID
	lastupdate      BIGINT,                         # timestamp of last write operation
	deleted			CHAR(1) default '0',			# indicates that this object is marked deleted
	patientid		VARCHAR(40),					# foreign key from 'KONTAKT' -> patient
	garantid		VARCHAR(40),					# foreign key from 'KONTAKT' -> bill receiver 
	kostentrid		VARCHAR(40),					# foreign key from 'KONTAKT' -> insurance
	versnummer		VARCHAR(40),					# deprecated, do not use
	fallnummer		VARCHAR(40),					# deprecated, do not use
	betriebsnummer	VARCHAR(40),					# deprecated, do not use
	diagnosen		VARCHAR(80),					# diagnoses related to this case
	datumvon		CHAR(8),						# date of beginning
	datumbis		CHAR(8),						# end date
	bezeichnung		VARCHAR(80),					# title of the case
	grund			VARCHAR(80),					# reason for treatment
	gesetz			VARCHAR(40),					# deprecated, do not use
	status			VARCHAR(80),					# deprecated, do not use
	extinfo			BLOB							# additional informations (hashtable)
);

CREATE INDEX i3 on FAELLE (PatientID);

# Eine Behandlung ist ein einzelner Mandant/Patient - Kontakt
CREATE TABLE  behandlungen(
	id				VARCHAR(40) primary key,		# UUID
	lastupdate      BIGINT,                         # timestamp
	deleted			CHAR(1) default '0',			# indicates that this object is marked deleted
	fallid			VARCHAR(40),					# foreign key from FAELLE -> case we belong to
	mandantid		VARCHAR(40),					# foreign key from KONTAKT -> mandator
	rechnungsid		VARCHAR(40),					# foreign key from RECHNUGNEN -> bill
	datum			CHAR(8),						# date of treatment
	Zeit			CHAR(8),
	diagnosen		VARCHAR(40),					# diagnoses
	leistungen		VARCHAR(40),					# deprecated, do not use.
	billable		char(1) default '1'
	eintrag			BLOB							# treatment text (as VersionedResource)
);

CREATE INDEX i4 on behandlungen (fallid);
CREATE INDEX idxRnId on behandlungen (rechnungsid);
# 
CREATE TABLE  artikel(
	id				VARCHAR(40) primary key,		# UUID
	lastupdate      BIGINT,                         # timestamp
	deleted			CHAR(1) default '0',			# indicates that this object is marked deleted
	ean				VARCHAR(15),                    # the european article number
	subid			VARCHAR(20),                    # an ID depending of the type (e.g. Pharmacode)
	lieferantid		VARCHAR(40),                    # foreign key from KONTAKT -> dealer
	klasse			VARCHAR(80),					# class of the objects representing this article
	name			VARCHAR(127),					# official name
	name_intern		VARCHAR(127),					# internal name
	maxbestand		CHAR(4),						# max number to hold on stock
	minbestand		CHAR(4),						# min number on stock before ordering
	istbestand		CHAR(4),						# actual number on stock
	ek_Preis		CHAR(8),						# cost (buy) in cents/rp
	vk_Preis		CHAR(8),						# price (sell) in cents/rp
	typ				VARCHAR(15),					# type of the article
	codeclass		VARCHAR(10),					# used differently
	extid			VARCHAR(40),					# used differently
	lastimport		CHAR(8),						# date of last import (yyyymmdd)
	validfrom		CHAR(8),			
	validto			CHAR(8),
	atc_code		VARCHAR(255),
	extinfo			BLOB							# additional informations (hashtable)
);

CREATE INDEX i5 on ARTIKEL (Name);
CREATE INDEX art1 on ARTIKEL (SubID);
CREATE INDEX art2 on ARTIKEL (Typ);
CREATE INDEX art3 on ARTIKEL (Codeclass);


# Relation of an article to a patient
CREATE TABLE  PATIENT_ARTIKEL_JOINT(
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	patientid		VARCHAR(40),					# foreign key from KONTAKT
	artikelid		VARCHAR(40),					# foreign key from ARTIKEL  !!!! DEPRECATED DO NOT USE !!!
	artikel			VARCHAR(255),					# cheap copy of article. replaces ArtikelID
	rezeptid		VARCHAR(40),					# prescription where this article was last given
	datefrom		CHAR(24),						# first date
	dateuntil		CHAR(24),						# date the medication was stopped
	dosis			VARCHAR(255),					# number
	anzahl			CHAR(3),
	bemerkung		VARCHAR(255),
	presctype		CHAR(2),						# the type of medication (fixed, prn)
	sortorder		CHAR(3),						# manual sort order
	prescdate		CHAR(8),						# date medication was prescribed
	prescriptor		VARCHAR(40),					# the contact that prescribed this 
	extinfo			BLOB
);

CREATE INDEX paj1 on PATIENT_ARTIKEL_JOINT(PATIENTID);
CREATE INDEX PAJ2 on PATIENT_ARTIKEL_JOINT(REZEPTID);

CREATE TABLE  ARTIKEL_DETAILS(   
    article_id      VARCHAR(40),                    # foreign key from ARTIKEL                     
    notes           TEXT,                           # informations or usage of the article
    image           BLOB                            # an image or other binary data
);

# Das Konto ist eine Liste sämtlicher Forderungen und Zahlungen
# Somit lässt sich für jeden Patienten über alle bisherigen
# Rechnungen eine übergreifende Bilanz erstellen und verrechnen.
CREATE TABLE  konto(
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	patientid		VARCHAR(40),              # foreign key from KONTAKT 
	rechnungsid		VARCHAR(40),              # foreign key from RECHNUNG
	zahlungsid		VARCHAR(40),              # foreign key from ZAHLUNG
	betrag			CHAR(8),
	datum			CHAR(8),
	bemerkung		VARCHAR(80),
	account			VARCHAR(255)
);

CREATE INDEX konto1 on KONTO (Datum);
CREATE INDEX konto2 on KONTO (PatientID);

# Eine Leistung ist eine einzelne Verrechnungsposition
CREATE TABLE  LEISTUNGEN(
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	behandlung		VARCHAR(40),
	leistg_txt		VARCHAR(255),
	leistg_code		VARCHAR(40),
	klasse			VARCHAR(80),
	zahl			CHAR(3),
	ek_kosten		CHAR(8),
	vk_tp			CHAR(8),
	vk_scale		CHAR(8),
	vk_preis		CHAR(8),
	scale			CHAR(4) DEFAULT '100',
	scale2			CHAR(4) DEFAULT '100',
	userid			VARCHAR(40),				# foreign key on user
	detail			BLOB
);

CREATE INDEX lst1 on LEISTUNGEN(BEHANDLUNG);
CREATE INDEX lst2 on LEISTUNGEN(KlASSE,LEISTG_CODE);

CREATE TABLE  ek_preise(
	typ				VARCHAR(80),
	id				VARCHAR(40),
	lastupdate      BIGINT,
	datum_von		CHAR(8),
	datum_bis		CHAR(8),
	multiplikator	CHAR(8)
);

CREATE INDEX ekp1 ON EK_PREISE (TYP);
CREATE INDEX ekp2 ON EK_PREISE (DATUM_VON);


CREATE TABLE  vk_preise(
	typ				VARCHAR(80),
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	datum_von		CHAR(8),
	datum_bis		CHAR(8),
	multiplikator	CHAR(8)
);

CREATE INDEX vkp1 on VK_PREISE (TYP);
CREATE INDEX vkp2 on VK_PREISE (DATUM_VON);


CREATE TABLE  diagnosen(
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	dg_txt			VARCHAR(255),
	dg_code			VARCHAR(40),
	klasse			VARCHAR(80)
);

CREATE INDEX dg1 on diagnosen (klasse,dg_code);

CREATE TABLE  behdl_dg_joint(
	id				VARCHAR(40),
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	Behandlungsid	VARCHAR(40) not null,
	Diagnoseid		VARCHAR(40) not null,
	PRIMARY KEY (behandlungsid, diagnoseid)
);

# Verschiedene Konfigurationsdaten
CREATE TABLE  config(
	id				VARCHAR(40),
	deleted			char(1) default '0',
    lastupdate      BIGINT,
	param			VARCHAR(80) primary key,
	wert			TEXT
);

# Briefe werden nicht in dieser Tabelle gespeichert.
# Hier befinden sich nur Verweise und Metainformationen zu
# den eigentlichen Briefen (welche in HEAP oder im Dateisystem sein können).
CREATE TABLE  briefe(
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	betreff			VARCHAR(255),
	datum			CHAR(24),
	modifiziert		CHAR(24),
	gedruckt		CHAR(8),
	geloescht		CHAR(2),
	note			TEXT,		  		   # Notizen
	absenderid		VARCHAR(40),           # foreign key from KONTAKT
	destid			VARCHAR(40),           # foreign key from KONTAKT
	behandlungsid	VARCHAR(40),           # foreign key from BEHANDLUNG
	patientid		VARCHAR(40),           # foreign key from KONTAKT
	typ				VARCHAR(30),
	mimetype		VARCHAR(80),
	path			TEXT
);

CREATE INDEX i8 on BRIEFE (BehandlungsID);

# Output log for letters, prescriptions etc.
CREATE TABLE  output_log(
	id				VARCHAR(40) primary key,
	lastupdate		BIGINT,
	deleted			CHAR(1) default '0',
	objectid		VARCHAR(40),		# foreign key from object
	objecttype		VARCHAR(80),		# Class ob object
	datum			CHAR(8),
	outputter		VARCHAR(80),		# identification of the output device/program
	extinfo			BLOB				# outputter specific information
);

CREATE INDEX bal_i1 ON OUTPUT_LOG (ObjectID);

# Bills
CREATE TABLE  rechnungen(
	id				VARCHAR(40) primary key,     # UUID
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',         # indicates that this object is marked deleted
	rnnummer		VARCHAR(8),                  # Number of the bill (unique within this database)
	fallid			VARCHAR(40),                 # foreign key from FAELLE (case this bill belongs to)
	mandantid		VARCHAR(40),                 # foreign key from KONTAKT (mandator this bill beongs to)
	rndatum			CHAR(8),                     # date of creating this bill
	rnstatus		VARCHAR(20),                 # state of this bill (e.g. open, payed)
	rndatumvon	    CHAR(8),                     # date of first treatment billed
	rndatumbis		CHAR(8),                     # date of last treatment billed
	betrag			CHAR(8),                     # amount in Rp / cents
	statusdatum		CHAR(8),                     # date of last state change
	extinfo			BLOB                         # hastable for trace infos etc.
);

CREATE INDEX Rn1 on RECHNUNGEN (fallid);
CREATE INDEX Rn2 on RECHNUNGEN (mandantid);
CREATE INDEX Rn3 ON RECHNUNGEN (rnstatus);
CREATE INDEX Rn4 ON RECHNUNGEN (rndatumvon);
CREATE INDEX Rn5 ON RECHNUNGEN (rndatumbis);

# payments
CREATE TABLE  zahlungen(
	id				VARCHAR(40) primary key,     # UUID
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',         # indicates that this object is marked deleted
	rechnungsid		VARCHAR(40),                 # bill this payment belongs to (can be null)
	betrag			CHAR(8),                     # amount of this payment in Rp/cents
	datum			CHAR(8),                     # date of this payment
	bemerkung		VARCHAR(80)                  # remark
);

CREATE INDEX zahl1 on ZAHLUNGEN(rechnungsid);

CREATE TABLE  reminders(
	id				VARCHAR(40) primary key,
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	identid			VARCHAR(40),                 # foreign key from KONTAKT
	originid		VARCHAR(40),                 # foreign key from KONTAKT
	responsible  	VARCHAR(40),                 # foreign key from KONTAKT
	datedue			CHAR(8),
	status			VARCHAR(1),
	typ				VARCHAR(1),
	params			TEXT,
	message			TEXT,
	priority		CHAR(1),
	actiontype		CHAR(2),
	subject			VARCHAR(160),
	extinfo			BLOB
);

CREATE TABLE  reminders_responsible_link(
	id				VARCHAR(40),
	lastupdate      BIGINT,
	deleted			CHAR(1) default '0',
	reminderid		VARCHAR(40) not null,              # foreign key from REMINDERS
	responsibleid	VARCHAR(40) not null,              # foreign key from KONTAKT
	PRIMARY KEY (reminderid, responsibleid)
);

CREATE INDEX rrl1 on REMINDERS_RESPONSIBLE_LINK (reminderid);
CREATE INDEX rrl2 on REMINDERS_RESPONSIBLE_LINK (responsibleid);

CREATE INDEX rem1 on REMINDERS (identid);
CREATE INDEX rem2 on REMINDERS (datedue);
CREATE INDEX rem3 ON REMINDERS (responsible);


# Die Trace-Table kann (wenn Trace eingeschaltet wurde) jeden Schreibzugriff
# auf die Datenbank protokollieren, und zwar mit Zeit, Datum, Arbeitsstation 
# und dort angemeldetem Benutzer. so können Fehlbedienungen besser erfasst und
# korrigiert werden.
CREATE TABLE traces(
	logtime			BIGINT,
	workstation		VARCHAR(40),
	username		VARCHAR(30),
	action			TEXT
);

CREATE INDEX trace1 on TRACES(logtime);
CREATE INDEX trace2 on TRACES(username);

# Das Schwarze Brett der Praxis
CREATE TABLE  BBS(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted			CHAR(1) default '0',
	reference	VARCHAR(40),
	topic		VARCHAR(80),
	date		CHAR(8),
	time		CHAR(4),
	authorID	VARCHAR(40),
	message		TEXT
);

CREATE INDEX bbs1 on BBS (reference);

# Ein Laboritem ist ein möglicher Laborbefund. Jedes
# Laboritem hat ein Labor, von dem es gemacht wird
# und den von diesem Labor stammenden Referenzbereich
# Typ des Werts ist entweder numerisch(0), TEXT (1) oder pos/neg (2)
# Ausserdem gehört jedes Laboritem zu einer Gruppe (unter der es im Laborblatt
# aufgelistet wird, und eine Priorität mit der es innerhalb dieser Gruppe
# gelistet ist.

CREATE TABLE  laboritems(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	kuerzel		VARCHAR(80),
	titel		VARCHAR(80),
	laborid		VARCHAR(40),                   # foreign key from KONTAKT
	refmann		VARCHAR(256),
	reffrauortx VARCHAR(256),
	einheit		VARCHAR(20),
	typ			CHAR(1),
	gruppe		VARCHAR(40),
	prio		CHAR(3),
	billingcode	VARCHAR(128),					# Code for automatic billing (from e.g EAL2009)
	export		VARCHAR(100),
	loinccode   VARCHAR(128),
	visible     VARCHAR(1),
	digits      VARCHAR(16),
	formula     VARCHAR(255)
);
	
CREATE INDEX labit1 on LABORITEMS(kuerzel);
CREATE INDEX labit2 on LABORITEMS(laborid);

# Laborwerte sind zuordnungen von Laboritems zu Datum und Patient
# mit dem entsprechenden Resultat.

CREATE TABLE  laborwerte(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	patientid	VARCHAR(40),              # foreign key from KONTAKT
	datum		CHAR(8),
	zeit        CHAR(6),
	itemid		VARCHAR(40),                # foreign key from LABORIMTEMS
	resultat	VARCHAR(255),
	flags		VARCHAR(10),
	origin		VARCHAR(30),
	unit        VARCHAR(255),
	analysetime VARCHAR(24),
	observationtime VARCHAR(24),
	transmissiontime VARCHAR(24),
	refmale     VARCHAR(255),
	reffemale   VARCHAR(255),
	originid    VARCHAR(40),
	kommentar	TEXT,
	pathodesc	VARCHAR(128),
	extinfo		BLOB
);

CREATE INDEX labor1 on LABORWERTE (patientid);
CREATE INDEX labor2 on LABORWERTE (datum);
CREATE INDEX labor3 on LABORWERTE (itemid);

CREATE TABLE  labgroups(
   id VARCHAR(40) primary key,
   lastupdate   BIGINT,
   deleted		CHAR(1) default '0',
   name VARCHAR(30)
); 

CREATE TABLE  labgroup_item_joint(
     lastupdate      BIGINT,
     groupid        VARCHAR(40),
     itemid         VARCHAR(40),
     comment        TEXT
); 

CREATE TABLE  laborder (
	id 				VARCHAR(40) primary key,
	lastupdate 		BIGINT default 0,
	deleted 		CHAR(1) default '0',
	userid 			VARCHAR(128),
	mandant 		VARCHAR(128),
	patient 		VARCHAR(128),
	item 			VARCHAR(128),
	result 			VARCHAR(128),
	orderid 		VARCHAR(128),
	groupname 		VARCHAR(255),
	time 			VARCHAR(24),
	observationtime VARCHAR(24),
	state 			CHAR(1)		
);

CREATE INDEX laborder1 ON LABORDER (time);
CREATE INDEX laborder2 ON LABORDER (mandant);
CREATE INDEX laborder3 ON LABORDER (patient);
CREATE INDEX laborder4 ON LABORDER (orderid);
CREATE INDEX idxResult ON laborder(result);

CREATE TABLE  rezepte(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	patientid	VARCHAR(40),                  # foreign key from KONTAKT
	mandantid	VARCHAR(40),                  # foreign key from KONTAKT
	briefid		VARCHAR(40),                  # foreign key from BRIEFE
	datum		CHAR(8),
	rptxt		TEXT,
	rpzusatz	VARCHAR(80)
);	

CREATE INDEX rp1 on REZEPTE(patientid);

# Tabelle zum Speichern von benannten BLOB's verschiedener Herkunft
CREATE TABLE  heap(
	id			VARCHAR(80) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	inhalt		BLOB,
	datum		CHAR(8)
);

CREATE TABLE  auf(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	patientid	VARCHAR(40),
	fallid		VARCHAR(40),
	briefid		VARCHAR(40),
	prozent		CHAR(3),
	datumauz	CHAR(8),
	datumvon	CHAR(8),
	datumbis	CHAR(8),
	grund		VARCHAR(50),
	aufzusatz	VARCHAR(80)
);
	
CREATE INDEX AUF1 on AUF(patientid);

CREATE TABLE  eigenleistungen(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	code		VARCHAR(20),
	bezeichnung VARCHAR(80),
	ek_preis	CHAR(6),
	vk_preis	CHAR(6),
	zeit		CHAR(4)
);

CREATE TABLE  heap2(
	id		    VARCHAR(80) primary key,
	deleted		CHAR(1) default '0',
	datum		CHAR(8),
	lastupdate  BIGINT,
	contents	BLOB
);

CREATE TABLE  logs(
	id			VARCHAR(40) primary key,	# log entry's id
	lastupdate  BIGINT,
	deleted     char(1) default '0',
	oid			VARCHAR(255),				# foreign key on modified object
	datum		CHAR(8),					# date of modification
	typ			VARCHAR(20),				
	userid		VARCHAR(40),				# foreign key on modifying user
	station		VARCHAR(255),				# modifying workstation name
	extinfo		BLOB
);

CREATE TABLE  userconfig(
	id			VARCHAR(40),
	deleted		CHAR(1) default '0',
    lastupdate  BIGINT,
	userid		VARCHAR(40),
	param		VARCHAR(80),
	value		TEXT
);
CREATE INDEX UCFG ON USERCONFIG(param);
CREATE INDEX UCFG2 ON USERCONFIG(userid);

CREATE TABLE  xid(
	id			VARCHAR(40) primary key,
	lastupdate  BIGINT,
	deleted		CHAR(1) default '0',
	type		VARCHAR(80),				# class of the object
	object		VARCHAR(40),				# ID of the object
	domain		VARCHAR(255),				# Domain of the XID used
	domain_id	VARCHAR(255),				# ID of the object within that domain
	quality		CHAR(1) default '0'			# Assignment tag of the XID
);
CREATE INDEX XIDIDX1 on XID(domain);
CREATE INDEX XIDIDX2 on XID(domain_id);
CREATE INDEX XIDIDX3 on XID(object);

CREATE TABLE  etiketten(  
    id          VARCHAR(40) primary key,
    lastupdate  BIGINT,
    image       VARCHAR(40),
    deleted     CHAR(1) default '0',
    importance	VARCHAR(7),
    name        VARCHAR(40),
    foreground  CHAR(6),
    background  CHAR(6),
    classes     VARCHAR(255)
);
CREATE INDEX ETIKETTE1 on ETIKETTEN(name);

CREATE TABLE  etiketten_object_link(
    lastupdate  BIGINT,
	obj			VARCHAR(40),
	etikette	VARCHAR(40)
);
CREATE INDEX ETIKETTE2 on ETIKETTEN_OBJECT_LINK(obj);
CREATE INDEX ETIKETTE3 on ETIKETTEN_OBJECT_LINK(etikette);

CREATE TABLE  etiketten_objclass_link(
	objclass VARCHAR(80),
	sticker VARCHAR(40)
);
CREATE INDEX eol1 on ETIKETTEN_OBJCLASS_LINK(objclass);

CREATE TABLE  dbimage (
    id             VARCHAR(40) primary key,
    lastupdate     BIGINT,
    deleted        CHAR(1) default '0',
    datum          CHAR(8),
    prefix		   VARCHAR(80),				# A Unique ID of the image creator/importer
    title          VARCHAR(80),  			# A title unique within the prefix's namespace
    bild           BLOB
);
CREATE INDEX DBIMAGE1 on DBIMAGE(Title);     

CREATE TABLE  stock (
	id 				VARCHAR(40) NOT NULL,
	lastupdate 		BIGINT DEFAULT NULL,
	deleted 		CHAR(1) DEFAULT '0',
	priority 		INTEGER DEFAULT 255,
	code 			CHAR(3), 
	description 	VARCHAR(255), 
	location 		VARCHAR(255), 
	owner 			VARCHAR(40), 
	responsible 	VARCHAR(40),
	driver_uuid 	VARCHAR(64), 
	driver_config 	TEXT,
	PRIMARY KEY (id)
);

INSERT INTO stock (id, code, priority) VALUES ('STD', 'STD', '0');

CREATE TABLE  stock_entry (
	id 				VARCHAR(40) NOT NULL,
	lastupdate 		BIGINT DEFAULT NULL,
	deleted 		CHAR(1) DEFAULT '0',
	stock 			VARCHAR(40) NOT NULL,
	article_type 	VARCHAR(255) NOT NULL,
	article_id 		VARCHAR(40) NOT NULL, 
	min				integer DEFAULT 0, 
	current			integer DEFAULT 0, 
	max				integer DEFAULT 0, 
	fractionunits 	INTEGER DEFAULT 0,
	provider 		VARCHAR(40), 
	PRIMARY KEY (id)
);

CREATE INDEX STOCK_ENTRY_STOCK0 ON STOCK_ENTRY(stock);
CREATE INDEX STOCK_ENTRY_TYPE0 ON STOCK_ENTRY(article_type);
CREATE INDEX STOCK_ENTRY_ID0 ON STOCK_ENTRY(article_id);

ALTER TABLE STOCK_ENTRY 
	ADD CONSTRAINT fk_stock_entry_stock_id FOREIGN KEY (stock) REFERENCES stock (id);
	
CREATE TABLE  bestellungen (
	id       	VARCHAR(80) NOT NULL,
 	lastupdate 	BIGINT DEFAULT 0,
  	deleted 	CHAR(1) DEFAULT '0',
	datum  	    CHAR(8),
	contents 	BLOB,
	PRIMARY KEY (id)
);

CREATE TABLE  bestellung_entry (
	id 				VARCHAR(40) NOT NULL,
	lastupdate 		BIGINT DEFAULT 0,
	deleted 		CHAR(1) DEFAULT '0',
	bestellung 		VARCHAR(80) NOT NULL, 
	stock 			VARCHAR(40), 
	article_type 	VARCHAR(255) NOT NULL,
	article_id 		VARCHAR(40) NOT NULL,
	count			INTEGER DEFAULT '0',
	provider 		VARCHAR(40),
	state 			INTEGER DEFAULT '0',
	PRIMARY KEY (id)
);

ALTER TABLE bestellung_entry 
	ADD CONSTRAINT fk_bestellung_entry_bestellung_id FOREIGN KEY (bestellung) REFERENCES bestellungen (id);

CREATE TABLE zusatzadresse (
	id       		VARCHAR(40) NOT NULL primary key,
 	lastupdate 		BIGINT DEFAULT 0,
  	deleted 		CHAR(1) DEFAULT '0',
	kontakt_id		VARCHAR(40)  NOT NULL,
	strasse1		VARCHAR(255),
	strasse2		VARCHAR(255),
	plz				VARCHAR(6),		
	ort				VARCHAR(255),
	land			CHAR(3),			
	typ 			CHAR(4) DEFAULT '0',
	anschrift		TEXT
);

ALTER TABLE zusatzadresse ADD CONSTRAINT fk_zusatzadresse_kontakt_id FOREIGN KEY (kontakt_id) REFERENCES kontakt(id);

CREATE TABLE  user_ (
  id 				VARCHAR(40) NOT NULL,		# the username is the id
  deleted 			CHAR(1) DEFAULT '0',
  kontakt_id 		VARCHAR(40),				# foreign key to contact table
  lastupdate 		BIGINT,
  hashed_password 	VARCHAR(64),				# Currently SHA-256
  salt 				VARCHAR(64),				# The SALT used for SHA256_PASSWORD hash
  is_active	 		CHAR(1) DEFAULT '1', 		# Is this account currently active? 
  is_administrator 	CHAR(1) DEFAULT '0',		# User is an administrator
  keystore 			TEXT,						# For key based authentication or signature purposes
  totp				char(16) null default null
  allow_external	char(1) not null default '0'
  extinfo 			BLOB,
  PRIMARY KEY (id)
);

CREATE TABLE  role (
  id 				VARCHAR(40) NOT NULL,
  lastupdate 		BIGINT DEFAULT 0,
  deleted 			CHAR(1) DEFAULT '0',
  extinfo 			BLOB,
  issystemrole 		CHAR(1) DEFAULT '0',
  PRIMARY KEY (id)
);
 
INSERT INTO ROLE (id, issystemrole) VALUES ('user', '1');
INSERT INTO ROLE (id, issystemrole) VALUES ('user_external', '1');
INSERT INTO ROLE (id, issystemrole) VALUES ('executive_doctor', '1');
INSERT INTO ROLE (id, issystemrole) VALUES ('doctor', '1');
INSERT INTO ROLE (id, issystemrole) VALUES ('assistant', '1');
INSERT INTO ROLE (id, issystemrole) VALUES ('patient', '1');
INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('esadmin', '1');
INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('fhir', '1');

CREATE TABLE  user_role_joint (
  id 				VARCHAR(40) NOT NULL,
  lastupdate 		BIGINT DEFAULT 0,
  deleted 			CHAR(1) DEFAULT NULL,
  user_id 			VARCHAR(40) NOT NULL,
  PRIMARY KEY (id, user_id)
);

# We must not name the table RIGHT, as this is an SQL keyword
CREATE TABLE  right_ (
  id 				VARCHAR(40) NOT NULL, 				# from ACE#getUniqueHashFromACE()
  lastupdate 		BIGINT DEFAULT 0,
  deleted 			CHAR(1) DEFAULT '0',
  log_execution 	CHAR(1),
  name 				VARCHAR(256),
  parentid 			VARCHAR(40),
  i18n_name 		VARCHAR(256),
  PRIMARY KEY (id)
);

INSERT INTO right_ (id, name, parentid) VALUES ('root', 'root', '');

# Join the roles with the rights
CREATE TABLE role_right_joint (
  id 				VARCHAR(40) NOT NULL,
  lastupdate 		BIGINT DEFAULT 0,
  deleted 			CHAR(1) DEFAULT NULL,
  role_id 			VARCHAR(40) NOT NULL,
  PRIMARY KEY (id, role_id)
);

# We prepare a view to join the rights of a user for easy querying
CREATE OR REPLACE VIEW RIGHTS_PER_ROLE AS SELECT 
	r.id AS role_id, ri.id AS right_id
FROM 
	role r
	LEFT JOIN role_right_joint rrj
		ON r.id = rrj.role_id
	LEFT JOIN right_ ri
		ON rrj.id = ri.id
ORDER BY r.id;

# We prepare a view to join the rights of a user for easy querying
CREATE OR REPLACE VIEW rights_per_user AS SELECT 
	u.id AS user_id, ri.id AS right_id, ri.name AS right_name
FROM 
	user_ u
	LEFT JOIN user_role_joint urj 
		ON u.id = urj.user_id
	LEFT JOIN role r
		ON urj.id = r.id
	LEFT JOIN role_right_joint rrj
		ON r.id = rrj.role_id
	LEFT JOIN right_ ri
		ON rrj.id = ri.id
ORDER BY u.id;

CREATE OR REPLACE VIEW INVOICE_BILL_STATE AS
    SELECT 
        rz.id AS InvoiceId,
        rz.RnNummer AS InvoiceNo,
        rz.rndatum,
        rz.rndatumvon,
        rz.rndatumbis,
        rz.statusdatum,
        rz.InvoiceState,
        rz.InvoiceTotal,
        rz.MandantId,
        f.patientid AS PatientId,
        k.bezeichnung1 AS PatName1,
        k.bezeichnung2 AS PatName2,
        k.geschlecht AS PatSex,
        k.geburtsdatum AS PatDob,
        f.id AS FallId,
        f.gesetz AS FallGesetz,
        f.garantID AS FallGarantId,
        f.KostentrID AS FallKostentrID,
        rz.paymentCount,
        rz.paidAmount,
        rz.openAmount
    FROM
        (SELECT 
            r.id,
                r.rnnummer,
                r.rndatum,
                r.rndatumvon,
                r.rndatumbis,
                r.statusdatum,
                r.fallid,
                r.MandantId,
                CAST(r.rnstatus AS SIGNED) AS InvoiceState,
                CAST(r.betrag AS SIGNED) AS InvoiceTotal,
                COUNT(z.id) AS paymentCount,
                CASE
                    WHEN COUNT(z.id) = 0 THEN 0
                    ELSE SUM(CAST(z.betrag AS SIGNED))
                END paidAmount,
                CASE
                    WHEN COUNT(z.id) = 0 THEN CAST(r.betrag AS SIGNED)
                    ELSE (CAST(r.betrag AS SIGNED) - SUM(CAST(z.betrag AS SIGNED)))
                END openAmount
        FROM
            RECHNUNGEN r
        LEFT JOIN zahlungen z ON z.rechnungsID = r.id AND z.deleted = 0
        WHERE
            r.deleted = 0
        GROUP BY r.id) rz
            LEFT JOIN
        faelle f ON rz.FallID = f.ID
            LEFT JOIN
        kontakt k ON f.PatientID = k.id;
        
INSERT INTO CONFIG (param,wert) VALUES ('dbversion','3.7.0');
INSERT INTO CONFIG (param,wert) VALUES ('ElexisVersion','3.7.0');

# Hack for Fall#Gesetz and cost-bearer transfer in 3.6
# This script is clearly only executed on a new database, where we do not need
# to transfer the old values, hence we initialize the resp. done flag
INSERT INTO config (lastupdate,param,wert) VALUES (1,'FallGesetzCostBearerMigratedTo36','1');
