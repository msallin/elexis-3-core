diff --git a/bundles/ch.elexis.core.data/rsc/createDB.script b/bundles/ch.elexis.core.data/rsc/createDB.script
index 4549f4f..fb0a9d4 100644
--- a/bundles/ch.elexis.core.data/rsc/createDB.script
+++ b/bundles/ch.elexis.core.data/rsc/createDB.script
@@ -1,5 +1,5 @@
 #/*******************************************************************************
-# * Copyright (c) 2005-2008, G. Weirich and Elexis
+# * Copyright (c) 2005-2019, G. Weirich and Elexis
 # * All rights reserved. This program and the accompanying materials
 # * are made available under the terms of the Eclipse Public License v1.0
 # * which accompanies this distribution, and is available at
@@ -26,7 +26,7 @@
 
 # Table for all kinds of contact information (Patients, Relations, Labs)
 CREATE TABLE KONTAKT(
-	ID				VARCHAR(25) primary key,	# UUID
+	ID				VARCHAR(40) primary key,	# UUID
 	lastupdate      BIGINT,                     # timestamp of last update
 	deleted			CHAR(1) default '0',		# indicates that this object is marked deleted
 	istOrganisation	CHAR(1) default '0',		# this object is an organization 
@@ -71,11 +71,11 @@
 # Verbindung von Kontakten zu Adressbezügen mit einem
 # BezugsTEXT
 CREATE TABLE KONTAKT_ADRESS_JOINT(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
-	myID		VARCHAR(25),					# ID of a KONTAKT 
-	otherID		VARCHAR(25),					# ID of a KONTAKT that ist related to myID
+	myID		VARCHAR(40),					# ID of a KONTAKT 
+	otherID		VARCHAR(40),					# ID of a KONTAKT that ist related to myID
 	Bezug		VARCHAR(80),					# Description of the relationship
 	myRType		CHAR(4),						# My formal relationship type
 	otherRType	CHAR(4)							# Other formal relationship type
@@ -87,15 +87,15 @@
 # Patienten und demselben Garanten zugeordnet werden. (Aber nicht
 # notwendigerweise demselben Mandanten)
 CREATE TABLE FAELLE(
-	ID				VARCHAR(25) primary key,		# UUID
+	id				VARCHAR(40) primary key,		# UUID
 	lastupdate      BIGINT,                         # timestamp of last write operation
 	deleted			CHAR(1) default '0',			# indicates that this object is marked deleted
-	PatientID		VARCHAR(25),					# foreign key from 'KONTAKT' -> patient
-	GarantID		VARCHAR(25),					# foreign key from 'KONTAKT' -> bill receiver 
-	KostentrID		VARCHAR(25),					# foreign key from 'KONTAKT' -> insurance
-	VersNummer		VARCHAR(25),					# deprecated, do not use
-	FallNummer		VARCHAR(25),					# deprecated, do not use
-	BetriebsNummer	VARCHAR(25),					# deprecated, do not use
+	PatientID		VARCHAR(40),					# foreign key from 'KONTAKT' -> patient
+	GarantID		VARCHAR(40),					# foreign key from 'KONTAKT' -> bill receiver 
+	KostentrID		VARCHAR(40),					# foreign key from 'KONTAKT' -> insurance
+	VersNummer		VARCHAR(40),					# deprecated, do not use
+	FallNummer		VARCHAR(40),					# deprecated, do not use
+	BetriebsNummer	VARCHAR(40),					# deprecated, do not use
 	Diagnosen		VARCHAR(80),					# diagnoses related to this case
 	DatumVon		CHAR(8),						# date of beginning
 	DatumBis		CHAR(8),						# end date
@@ -110,15 +110,16 @@
 
 # Eine Behandlung ist ein einzelner Mandant/Patient - Kontakt
 CREATE TABLE BEHANDLUNGEN(
-	ID				VARCHAR(25) primary key,		# UUID
+	id				VARCHAR(40) primary key,		# UUID
 	lastupdate      BIGINT,                         # timestamp
 	deleted			CHAR(1) default '0',			# indicates that this object is marked deleted
-	FallID			VARCHAR(25),					# foreign key from FAELLE -> case we belong to
-	MandantID		VARCHAR(25),					# foreign key from KONTAKT -> mandator
-	RechnungsID		VARCHAR(25),					# foreign key from RECHNUGNEN -> bill
+	FallID			VARCHAR(40),					# foreign key from FAELLE -> case we belong to
+	MandantID		VARCHAR(40),					# foreign key from KONTAKT -> mandator
+	RechnungsID		VARCHAR(40),					# foreign key from RECHNUGNEN -> bill
 	Datum			CHAR(8),						# date of treatment
-	Diagnosen		VARCHAR(25),					# diagnoses
-	Leistungen		VARCHAR(25),					# deprecated, do not use.
+	Zeit			CHAR(8),
+	Diagnosen		VARCHAR(40),					# diagnoses
+	Leistungen		VARCHAR(40),					# deprecated, do not use.
 	Eintrag			BLOB							# treatment text (as VersionedResource)
 );
 
@@ -126,12 +127,12 @@
 
 # 
 CREATE TABLE ARTIKEL(
-	ID				VARCHAR(25) primary key,		# UUID
+	id				VARCHAR(40) primary key,		# UUID
 	lastupdate      BIGINT,                         # timestamp
 	deleted			CHAR(1) default '0',			# indicates that this object is marked deleted
 	EAN				VARCHAR(15),                    # the european article number
 	SubID			VARCHAR(20),                    # an ID depending of the type (e.g. Pharmacode)
-	LieferantID		VARCHAR(25),                    # foreign key from KONTAKT -> dealer
+	LieferantID		VARCHAR(40),                    # foreign key from KONTAKT -> dealer
 	Klasse			VARCHAR(80),					# class of the objects representing this article
 	Name			VARCHAR(127),					# official name
 	Name_intern		VARCHAR(127),					# internal name
@@ -142,7 +143,7 @@
 	VK_Preis		CHAR(8),						# price (sell) in cents/rp
 	Typ				VARCHAR(15),					# type of the article
 	Codeclass		VARCHAR(10),					# used differently
-	ExtID			VARCHAR(25),					# used differently
+	ExtID			VARCHAR(40),					# used differently
 	LastImport		CHAR(8),						# date of last import (yyyymmdd)
 	ValidFrom		CHAR(8),			
 	ValidTo			CHAR(8),
@@ -158,13 +159,13 @@
 
 # Relation of an article to a patient
 CREATE TABLE PATIENT_ARTIKEL_JOINT(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
-	PatientID		VARCHAR(25),					# foreign key from KONTAKT
-	ArtikelID		VARCHAR(25),					# foreign key from ARTIKEL  !!!! DEPRECATED DO NOT USE !!!
+	PatientID		VARCHAR(40),					# foreign key from KONTAKT
+	ArtikelID		VARCHAR(40),					# foreign key from ARTIKEL  !!!! DEPRECATED DO NOT USE !!!
 	Artikel			VARCHAR(255),					# cheap copy of article. replaces ArtikelID
-	RezeptID		VARCHAR(25),					# prescription where this article was last given
+	RezeptID		VARCHAR(40),					# prescription where this article was last given
 	DateFrom		CHAR(24),						# first date
 	DateUntil		CHAR(24),						# date the medication was stopped
 	Dosis			VARCHAR(255),					# number
@@ -173,7 +174,7 @@
 	prescType		CHAR(2),						# the type of medication (fixed, prn)
 	sortOrder		CHAR(3),						# manual sort order
 	prescDate		CHAR(8),						# date medication was prescribed
-	prescriptor		VARCHAR(25),					# the contact that prescribed this 
+	prescriptor		VARCHAR(40),					# the contact that prescribed this 
 	ExtInfo			BLOB
 );
 
@@ -181,7 +182,7 @@
 CREATE INDEX PAJ2 on PATIENT_ARTIKEL_JOINT(REZEPTID);
 
 CREATE TABLE ARTIKEL_DETAILS(   
-    ARTICLE_ID      VARCHAR(25),                    # foreign key from ARTIKEL                     
+    ARTICLE_ID      VARCHAR(40),                    # foreign key from ARTIKEL                     
     notes           TEXT,                           # informations or usage of the article
     image           BLOB                            # an image or other binary data
 );
@@ -190,12 +191,12 @@
 # Somit lässt sich für jeden Patienten über alle bisherigen
 # Rechnungen eine übergreifende Bilanz erstellen und verrechnen.
 CREATE TABLE KONTO(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
-	PatientID		VARCHAR(25),              # foreign key from KONTAKT 
-	RechnungsID		VARCHAR(25),              # foreign key from RECHNUNG
-	ZahlungsID		VARCHAR(25),              # foreign key from ZAHLUNG
+	PatientID		VARCHAR(40),              # foreign key from KONTAKT 
+	RechnungsID		VARCHAR(40),              # foreign key from RECHNUNG
+	ZahlungsID		VARCHAR(40),              # foreign key from ZAHLUNG
 	Betrag			CHAR(8),
 	Datum			CHAR(8),
 	Bemerkung		VARCHAR(80),
@@ -207,12 +208,12 @@
 
 # Eine Leistung ist eine einzelne Verrechnungsposition
 CREATE TABLE LEISTUNGEN(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
-	BEHANDLUNG		VARCHAR(25),
+	BEHANDLUNG		VARCHAR(40),
 	LEISTG_TXT		VARCHAR(255),
-	LEISTG_CODE		VARCHAR(25),
+	LEISTG_CODE		VARCHAR(40),
 	KLASSE			VARCHAR(80),
 	ZAHL			CHAR(3),
 	EK_KOSTEN		CHAR(8),
@@ -221,7 +222,7 @@
 	VK_PREIS		CHAR(8),
 	SCALE			CHAR(4) DEFAULT '100',
 	SCALE2			CHAR(4) DEFAULT '100',
-	userID			VARCHAR(25),				# foreign key on user
+	userID			VARCHAR(40),				# foreign key on user
 	DETAIL			BLOB
 );
 
@@ -230,7 +231,7 @@
 
 CREATE TABLE EK_PREISE(
 	TYP				VARCHAR(80),
-	ID				VARCHAR(25),
+	id				VARCHAR(40),
 	lastupdate      BIGINT,
 	DATUM_VON		CHAR(8),
 	DATUM_BIS		CHAR(8),
@@ -243,7 +244,7 @@
 
 CREATE TABLE VK_PREISE(
 	TYP				VARCHAR(80),
-	ID				VARCHAR(25),
+	id				VARCHAR(40),
 	lastupdate      BIGINT,
 	DATUM_VON		CHAR(8),
 	DATUM_BIS		CHAR(8),
@@ -255,27 +256,29 @@
 
 
 CREATE TABLE DIAGNOSEN(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
 	DG_TXT			VARCHAR(255),
-	DG_CODE			VARCHAR(25),
+	DG_CODE			VARCHAR(40),
 	KLASSE			VARCHAR(80)
 );
 
 CREATE INDEX dg1 on DIAGNOSEN (KLASSE,DG_CODE);
 
 CREATE TABLE BEHDL_DG_JOINT(
-	ID				VARCHAR(25),
+	id				VARCHAR(40),
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
-	BehandlungsID	VARCHAR(25),
-	DiagnoseID		VARCHAR(25),
+	BehandlungsID	VARCHAR(40),
+	DiagnoseID		VARCHAR(40),
 	PRIMARY KEY (BehandlungsID, DiagnoseID)
 );
 
 # Verschiedene Konfigurationsdaten
 CREATE TABLE CONFIG(
+	id				VARCHAR(40),
+	deleted			char(1) default '0',
     lastupdate      BIGINT,
 	param			VARCHAR(80) primary key,
 	wert			TEXT
@@ -285,7 +288,7 @@
 # Hier befinden sich nur Verweise und Metainformationen zu
 # den eigentlichen Briefen (welche in HEAP oder im Dateisystem sein können).
 CREATE TABLE BRIEFE(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
 	Betreff			VARCHAR(255),
@@ -294,10 +297,10 @@
 	gedruckt		CHAR(8),
 	geloescht		CHAR(2),
 	note			TEXT,		  		   # Notizen
-	AbsenderID		VARCHAR(25),           # foreign key from KONTAKT
-	DestID			VARCHAR(25),           # foreign key from KONTAKT
-	BehandlungsID	VARCHAR(25),           # foreign key from BEHANDLUNG
-	PatientID		VARCHAR(25),           # foreign key from KONTAKT
+	AbsenderID		VARCHAR(40),           # foreign key from KONTAKT
+	DestID			VARCHAR(40),           # foreign key from KONTAKT
+	BehandlungsID	VARCHAR(40),           # foreign key from BEHANDLUNG
+	PatientID		VARCHAR(40),           # foreign key from KONTAKT
 	Typ				VARCHAR(30),
 	MimeType		VARCHAR(80),
 	Path			TEXT
@@ -307,10 +310,10 @@
 
 # Output log for letters, prescriptions etc.
 CREATE TABLE OUTPUT_LOG(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate		BIGINT,
 	deleted			CHAR(1) default '0',
-	ObjectID		VARCHAR(25),		# foreign key from object
+	ObjectID		VARCHAR(40),		# foreign key from object
 	ObjectType		VARCHAR(80),		# Class ob object
 	Datum			CHAR(8),
 	Outputter		VARCHAR(80),		# identification of the output device/program
@@ -321,12 +324,12 @@
 
 # Bills
 CREATE TABLE RECHNUNGEN(
-	ID				VARCHAR(25) primary key,     # UUID
+	id				VARCHAR(40) primary key,     # UUID
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',         # indicates that this object is marked deleted
 	RnNummer		VARCHAR(8),                  # Number of the bill (unique within this database)
-	FallID			VARCHAR(25),                 # foreign key from FAELLE (case this bill belongs to)
-	MandantID		VARCHAR(25),                 # foreign key from KONTAKT (mandator this bill beongs to)
+	FallID			VARCHAR(40),                 # foreign key from FAELLE (case this bill belongs to)
+	MandantID		VARCHAR(40),                 # foreign key from KONTAKT (mandator this bill beongs to)
 	RnDatum			CHAR(8),                     # date of creating this bill
 	RnStatus		VARCHAR(20),                 # state of this bill (e.g. open, payed)
 	RnDatumVon	    CHAR(8),                     # date of first treatment billed
@@ -344,10 +347,10 @@
 
 # payments
 CREATE TABLE ZAHLUNGEN(
-	ID				VARCHAR(25) primary key,     # UUID
+	id				VARCHAR(40) primary key,     # UUID
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',         # indicates that this object is marked deleted
-	RechnungsID		VARCHAR(25),                 # bill this payment belongs to (can be null)
+	RechnungsID		VARCHAR(40),                 # bill this payment belongs to (can be null)
 	Betrag			CHAR(8),                     # amount of this payment in Rp/cents
 	Datum			CHAR(8),                     # date of this payment
 	Bemerkung		VARCHAR(80)                  # remark
@@ -356,12 +359,12 @@
 CREATE INDEX zahl1 on ZAHLUNGEN(RechnungsID);
 
 CREATE TABLE REMINDERS(
-	ID				VARCHAR(25) primary key,
+	id				VARCHAR(40) primary key,
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
-	IdentID			VARCHAR(25),                 # foreign key from KONTAKT
-	OriginID		VARCHAR(25),                 # foreign key from KONTAKT
-	Responsible  	VARCHAR(25),                 # foreign key from KONTAKT
+	IdentID			VARCHAR(40),                 # foreign key from KONTAKT
+	OriginID		VARCHAR(40),                 # foreign key from KONTAKT
+	Responsible  	VARCHAR(40),                 # foreign key from KONTAKT
 	DateDue			CHAR(8),
 	Status			VARCHAR(1),
 	Typ				VARCHAR(1),
@@ -373,11 +376,11 @@
 );
 
 CREATE TABLE REMINDERS_RESPONSIBLE_LINK(
-	ID				VARCHAR(25),
+	id				VARCHAR(40),
 	lastupdate      BIGINT,
 	deleted			CHAR(1) default '0',
-	ReminderID		VARCHAR(25),                  # foreign key from REMINDERS
-	ResponsibleID	VARCHAR(25),               # foreign key from KONTAKT
+	ReminderID		VARCHAR(40),                  # foreign key from REMINDERS
+	ResponsibleID	VARCHAR(40),               # foreign key from KONTAKT
 	PRIMARY KEY (ReminderID, ResponsibleID)
 );
 
@@ -405,14 +408,14 @@
 
 # Das Schwarze Brett der Praxis
 CREATE TABLE BBS(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted			CHAR(1) default '0',
-	reference	VARCHAR(25),
+	reference	VARCHAR(40),
 	topic		VARCHAR(80),
 	date		CHAR(8),
 	time		CHAR(4),
-	authorID	VARCHAR(25),
+	authorID	VARCHAR(40),
 	message		TEXT
 );
 
@@ -427,17 +430,17 @@
 # gelistet ist.
 
 CREATE TABLE LABORITEMS(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
 	kuerzel		VARCHAR(80),
 	titel		VARCHAR(80),
-	laborID		VARCHAR(25),                   # foreign key from KONTAKT
+	laborID		VARCHAR(40),                   # foreign key from KONTAKT
 	RefMann		VARCHAR(256),
 	RefFrauOrTx VARCHAR(256),
 	Einheit		VARCHAR(20),
 	typ			CHAR(1),
-	Gruppe		VARCHAR(25),
+	Gruppe		VARCHAR(40),
 	prio		CHAR(3),
 	billingcode	VARCHAR(128),					# Code for automatic billing (from e.g EAL2009)
 	export		VARCHAR(100),
@@ -454,13 +457,13 @@
 # mit dem entsprechenden Resultat.
 
 CREATE TABLE LABORWERTE(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
-	PatientID	VARCHAR(25),              # foreign key from KONTAKT
+	PatientID	VARCHAR(40),              # foreign key from KONTAKT
 	datum		CHAR(8),
 	zeit        CHAR(6),
-	ItemID		VARCHAR(25),                # foreign key from LABORIMTEMS
+	ItemID		VARCHAR(40),                # foreign key from LABORIMTEMS
 	Resultat	VARCHAR(255),
 	Flags		VARCHAR(10),
 	Origin		VARCHAR(30),
@@ -470,7 +473,7 @@
 	transmissiontime VARCHAR(24),
 	refmale     VARCHAR(255),
 	reffemale   VARCHAR(255),
-	OriginID    VARCHAR(25),
+	OriginID    VARCHAR(40),
 	Kommentar	TEXT,
 	ExtInfo		BLOB
 );
@@ -480,7 +483,7 @@
 CREATE INDEX labor3 on LABORWERTE (ItemID);
 
 CREATE TABLE LABGROUPS(
-   ID VARCHAR(25) primary key,
+   id VARCHAR(40) primary key,
    lastupdate   BIGINT,
    deleted		CHAR(1) default '0',
    name VARCHAR(30)
@@ -488,13 +491,13 @@
 
 CREATE TABLE LABGROUP_ITEM_JOINT(
      lastupdate      BIGINT,
-     GroupID        VARCHAR(25),
-     ItemID         VARCHAR(25),
+     GroupID        VARCHAR(40),
+     ItemID         VARCHAR(40),
      Comment        TEXT
 ); 
 
 CREATE TABLE LABORDER (
-	ID VARCHAR(25) primary key,
+	id VARCHAR(40) primary key,
 	lastupdate BIGINT,
 	deleted CHAR(1) default '0',
 	userid VARCHAR(128),
@@ -515,12 +518,12 @@
 CREATE INDEX laborder4 ON LABORDER (orderid);
 
 CREATE TABLE REZEPTE(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
-	PatientID	VARCHAR(25),                  # foreign key from KONTAKT
-	MandantID	VARCHAR(25),                  # foreign key from KONTAKT
-	BriefID		VARCHAR(25),                  # foreign key from BRIEFE
+	PatientID	VARCHAR(40),                  # foreign key from KONTAKT
+	MandantID	VARCHAR(40),                  # foreign key from KONTAKT
+	BriefID		VARCHAR(40),                  # foreign key from BRIEFE
 	datum		CHAR(8),
 	RpTxt		TEXT,
 	RpZusatz	VARCHAR(80)
@@ -530,7 +533,7 @@
 
 # Tabelle zum Speichern von benannten BLOB's verschiedener Herkunft
 CREATE TABLE HEAP(
-	ID			VARCHAR(80) primary key,
+	id			VARCHAR(80) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
 	inhalt		BLOB,
@@ -538,12 +541,12 @@
 );
 
 CREATE TABLE AUF(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
-	PatientID	VARCHAR(25),
-	FallID		VARCHAR(25),
-	BriefID		VARCHAR(25),
+	PatientID	VARCHAR(40),
+	FallID		VARCHAR(40),
+	BriefID		VARCHAR(40),
 	Prozent		CHAR(3),
 	DatumAUZ	CHAR(8),
 	DatumVon	CHAR(8),
@@ -555,7 +558,7 @@
 CREATE INDEX AUF1 on AUF(PatientID);
 
 CREATE TABLE EIGENLEISTUNGEN(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
 	Code		VARCHAR(20),
@@ -566,7 +569,7 @@
 );
 
 CREATE TABLE HEAP2(
-	ID		    VARCHAR(80) primary key,
+	id		    VARCHAR(80) primary key,
 	deleted		CHAR(1) default '0',
 	datum		CHAR(8),
 	lastupdate  BIGINT,
@@ -574,20 +577,22 @@
 );
 
 CREATE TABLE LOGS(
-	ID			VARCHAR(25) primary key,	# log entry's id
+	id			VARCHAR(40) primary key,	# log entry's id
 	lastupdate  BIGINT,
 	deleted     char(1) default '0',
 	OID			VARCHAR(255),				# foreign key on modified object
 	datum		CHAR(8),					# date of modification
 	typ			VARCHAR(20),				
-	userID		VARCHAR(25),				# foreign key on modifying user
+	userID		VARCHAR(40),				# foreign key on modifying user
 	station		VARCHAR(255),				# modifying workstation name
 	ExtInfo		BLOB
 );
 
 CREATE TABLE USERCONFIG(
+	id			VARCHAR(40),
+	deleted		CHAR(1) default '0',
     lastupdate  BIGINT,
-	UserID		VARCHAR(25),
+	UserID		VARCHAR(40),
 	Param		VARCHAR(80),
 	Value		TEXT
 );
@@ -595,11 +600,11 @@
 CREATE INDEX UCFG2 ON USERCONFIG(UserID);
 
 CREATE TABLE XID(
-	ID			VARCHAR(25) primary key,
+	id			VARCHAR(40) primary key,
 	lastupdate  BIGINT,
 	deleted		CHAR(1) default '0',
 	type		VARCHAR(80),				# class of the object
-	object		VARCHAR(25),				# ID of the object
+	object		VARCHAR(40),				# ID of the object
 	domain		VARCHAR(255),				# Domain of the XID used
 	domain_id	VARCHAR(255),				# ID of the object within that domain
 	quality		CHAR(1) default '0'			# Assignment tag of the XID
@@ -609,9 +614,9 @@
 CREATE INDEX XIDIDX3 on XID(object);
 
 CREATE TABLE ETIKETTEN(  
-    ID          VARCHAR(25) primary key,
+    id          VARCHAR(40) primary key,
     lastupdate  BIGINT,
-    Image       VARCHAR(25),
+    Image       VARCHAR(40),
     deleted     CHAR(1) default '0',
     importance	VARCHAR(7),
     Name        VARCHAR(40),
@@ -623,20 +628,20 @@
 
 CREATE TABLE ETIKETTEN_OBJECT_LINK(
     lastupdate  BIGINT,
-	obj			VARCHAR(25),
-	etikette	VARCHAR(25)
+	obj			VARCHAR(40),
+	etikette	VARCHAR(40)
 );
 CREATE INDEX ETIKETTE2 on ETIKETTEN_OBJECT_LINK(obj);
 CREATE INDEX ETIKETTE3 on ETIKETTEN_OBJECT_LINK(etikette);
 
 CREATE TABLE ETIKETTEN_OBJCLASS_LINK(
 	objclass VARCHAR(80),
-	sticker VARCHAR(25)
+	sticker VARCHAR(40)
 );
 CREATE INDEX eol1 on ETIKETTEN_OBJCLASS_LINK(objclass);
 
 CREATE TABLE DBIMAGE (
-    ID             VARCHAR(25) primary key,
+    id             VARCHAR(40) primary key,
     lastupdate     BIGINT,
     deleted        CHAR(1) default '0',
     Datum          CHAR(8),
@@ -647,15 +652,15 @@
 CREATE INDEX DBIMAGE1 on DBIMAGE(Title);     
 
 CREATE TABLE STOCK (
-	ID VARCHAR(25) NOT NULL,
+	id VARCHAR(40) NOT NULL,
 	LASTUPDATE BIGINT DEFAULT NULL,
-	DELETED CHAR(1) DEFAULT '0',
+	deleted CHAR(1) DEFAULT '0',
 	PRIORITY INTEGER DEFAULT 255,
 	CODE CHAR(3), 
 	DESCRIPTION VARCHAR(255), 
 	LOCATION VARCHAR(255), 
-	OWNER VARCHAR(25), 
-	RESPONSIBLE VARCHAR(25),
+	OWNER VARCHAR(40), 
+	RESPONSIBLE VARCHAR(40),
 	DRIVER_UUID VARCHAR(64), 
 	DRIVER_CONFIG TEXT,
 	PRIMARY KEY (ID)
@@ -664,17 +669,17 @@
 INSERT INTO STOCK (ID, CODE, PRIORITY) VALUES ('STD', 'STD', '0');
 
 CREATE TABLE STOCK_ENTRY (
-	ID VARCHAR(25) NOT NULL,
+	id VARCHAR(40) NOT NULL,
 	LASTUPDATE BIGINT DEFAULT NULL,
-	DELETED CHAR(1) DEFAULT '0',
-	STOCK VARCHAR(25) NOT NULL,
+	deleted CHAR(1) DEFAULT '0',
+	STOCK VARCHAR(40) NOT NULL,
 	ARTICLE_TYPE VARCHAR(255) NOT NULL,
-	ARTICLE_ID VARCHAR(25) NOT NULL, 
+	ARTICLE_ID VARCHAR(40) NOT NULL, 
 	MIN INTEGER DEFAULT 0, 
 	CURRENT INTEGER DEFAULT 0, 
 	MAX INTEGER DEFAULT 0, 
 	FRACTIONUNITS INTEGER DEFAULT 0,
-	PROVIDER VARCHAR(25), 
+	PROVIDER VARCHAR(40), 
 	PRIMARY KEY (ID)
 );
 
@@ -686,24 +691,24 @@
 	ADD CONSTRAINT FK_STOCK_ENTRY_STOCK_ID FOREIGN KEY (STOCK) REFERENCES STOCK (ID);
 	
 CREATE TABLE IF NOT EXISTS BESTELLUNGEN (
-	ID       	VARCHAR(80) NOT NULL,
+	id       	VARCHAR(80) NOT NULL,
  	LASTUPDATE 	BIGINT DEFAULT NULL,
-  	DELETED 	CHAR(1) DEFAULT '0',
+  	deleted 	CHAR(1) DEFAULT '0',
 	DATUM  	    CHAR(8),
 	CONTENTS 	BLOB,
 	PRIMARY KEY (ID)
 );
 
 CREATE TABLE BESTELLUNG_ENTRY (
-	ID VARCHAR(25) NOT NULL,
+	id VARCHAR(40) NOT NULL,
 	LASTUPDATE BIGINT DEFAULT NULL,
-	DELETED CHAR(1) DEFAULT '0',
+	deleted CHAR(1) DEFAULT '0',
 	BESTELLUNG VARCHAR(80) NOT NULL, 
-	STOCK VARCHAR(25), 
+	STOCK VARCHAR(40), 
 	ARTICLE_TYPE VARCHAR(255) NOT NULL,
-	ARTICLE_ID VARCHAR(25) NOT NULL,
+	ARTICLE_ID VARCHAR(40) NOT NULL,
 	COUNT INTEGER DEFAULT '0',
-	PROVIDER VARCHAR(25),
+	PROVIDER VARCHAR(40),
 	STATE INTEGER DEFAULT '0',
 	PRIMARY KEY (ID)
 );
@@ -711,6 +716,93 @@
 ALTER TABLE BESTELLUNG_ENTRY 
 	ADD CONSTRAINT FK_BESTELLUNG_ENTRY_BESTELLUNG_ID FOREIGN KEY (BESTELLUNG) REFERENCES BESTELLUNGEN (ID);
 
+CREATE TABLE USER_ (
+  id VARCHAR(40) NOT NULL,				# the username is the id
+  deleted CHAR(1) DEFAULT '0',
+  KONTAKT_ID VARCHAR(40),				# foreign key to contact table
+  LASTUPDATE BIGINT,
+  HASHED_PASSWORD VARCHAR(64),			# Currently SHA-256
+  SALT VARCHAR(64),						# The SALT used for SHA256_PASSWORD hash
+  IS_ACTIVE CHAR(1) DEFAULT '1', 		# Is this account currently active? If not, any log-in is to be prohibited.
+  IS_ADMINISTRATOR CHAR(1) DEFAULT '0',	# User is an administrator
+  KEYSTORE TEXT,						# For key based authentication or signature purposes
+  EXTINFO BLOB,
+  PRIMARY KEY (ID)
+);
+
+CREATE TABLE ROLE (
+  id VARCHAR(40) NOT NULL,
+  LASTUPDATE BIGINT DEFAULT NULL,
+  deleted CHAR(1) DEFAULT '0',
+  EXTINFO BLOB,
+  ISSYSTEMROLE CHAR(1) DEFAULT '0',
+  PRIMARY KEY (ID)
+);
+ 
+INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('user', '1');
+INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('user_external', '1');
+INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('executive_doctor', '1');
+INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('doctor', '1');
+INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('assistant', '1');
+INSERT INTO ROLE (ID, ISSYSTEMROLE) VALUES ('patient', '1');
+
+CREATE TABLE USER_ROLE_JOINT (
+  id VARCHAR(40) NOT NULL,
+  LASTUPDATE BIGINT DEFAULT NULL,
+  deleted CHAR(1) DEFAULT NULL,
+  USER_ID VARCHAR(40) NOT NULL,
+  PRIMARY KEY (ID, USER_ID)
+);
+
+# We must not name the table RIGHT, as this is an SQL keyword
+CREATE TABLE RIGHT_ (
+  id VARCHAR(40) NOT NULL, 				# from ACE#getUniqueHashFromACE()
+  LASTUPDATE BIGINT DEFAULT NULL,
+  deleted CHAR(1) DEFAULT '0',
+  LOG_EXECUTION CHAR(1),
+  NAME VARCHAR(256),
+  PARENTID VARCHAR(40),
+  I18N_NAME VARCHAR(256),
+  PRIMARY KEY (ID)
+);
+
+INSERT INTO RIGHT_ (ID, NAME, PARENTID) VALUES ('root', 'root', '');
+
+# Join the roles with the rights
+CREATE TABLE ROLE_RIGHT_JOINT (
+  id VARCHAR(40) NOT NULL,
+  LASTUPDATE BIGINT DEFAULT NULL,
+  deleted CHAR(1) DEFAULT NULL,
+  ROLE_ID VARCHAR(40) NOT NULL,
+  PRIMARY KEY (ID, ROLE_ID)
+);
+
+# We prepare a view to join the rights of a user for easy querying
+CREATE OR REPLACE VIEW RIGHTS_PER_ROLE AS SELECT 
+	r.id AS ROLE_ID, ri.id AS RIGHT_ID
+FROM 
+	ROLE r
+	LEFT JOIN ROLE_RIGHT_JOINT rrj
+		ON r.id = rrj.ROLE_ID
+	LEFT JOIN RIGHT_ ri
+		ON rrj.id = ri.id
+ORDER BY r.id;
+
+# We prepare a view to join the rights of a user for easy querying
+CREATE OR REPLACE VIEW RIGHTS_PER_USER AS SELECT 
+	u.id AS USER_ID, ri.id AS RIGHT_ID, ri.NAME AS RIGHT_NAME
+FROM 
+	USER_ u
+	LEFT JOIN USER_ROLE_JOINT urj 
+		ON u.id = urj.USER_ID
+	LEFT JOIN ROLE r
+		ON urj.id = r.id
+	LEFT JOIN ROLE_RIGHT_JOINT rrj
+		ON r.id = rrj.ROLE_id
+	LEFT JOIN RIGHT_ ri
+		ON rrj.id = ri.id
+ORDER BY u.id;
+
 INSERT INTO CONFIG (param,wert) VALUES ('dbversion','3.2.5');
 INSERT INTO CONFIG (param,wert) VALUES ('ElexisVersion','3.2.0');
 
